{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\OneDrive\\\\Desktop\\\\Dev Prog\\\\React Quiz\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport IntroPage from \"./intropage.js\";\nimport Question from \"./questions.js\";\nimport Answers from \"./answers.js\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [StartGame, setStartGame] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answerCheck, setAnswerCheck] = useState(false);\n  const [resetGame, setResetGame] = useState(true);\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => {\n      const questions = data.results.map(res => {\n        const answers = res.incorrect_answers.concat(res.correct_answer);\n\n        function scoreValue() {\n          if (res.difficulty === \"easy\") {\n            return 1;\n          } else if (res.difficulty === \"medium\") {\n            return 2;\n          } else if (res.difficulty === \"hard\") {\n            return 3;\n          }\n        }\n\n        const answersArr = answers.map(a => {\n          return {\n            answer: a,\n            isSelected: false,\n            isCorrect: a === res.correct_answer ? true : false,\n            id: {\n              nanoid\n            }\n          };\n        });\n        return {\n          question: res.question,\n          answers: shuffle(answersArr),\n          category: res.category,\n          difficulty: res.difficulty,\n          scoreValue: scoreValue(),\n          id: {\n            nanoid\n          }\n        };\n      });\n      setQuestions(questions);\n    });\n  }, [resetGame]);\n\n  function answerSelected(aid, qid) {\n    setQuestions(oldQuestions => oldQuestions.map(q => {\n      if (q.id === qid) {\n        const answerArr = q.answers.map(a => {\n          /*if(a.id === aid && q.id === qid){\n            return { ...a, isSelected: !a.isSelected }\n          }else if(q.id !== qid){\n            return a\n          }*/\n          return a.id === aid ? { ...a,\n            isSelected: !a.isSelected\n          } : a;\n        });\n      }\n\n      function scoreValue() {\n        if (q.difficulty === \"easy\") {\n          return 1;\n        } else if (q.difficulty === \"medium\") {\n          return 2;\n        } else if (q.difficulty === \"hard\") {\n          return 3;\n        }\n      }\n\n      return {\n        question: q.question,\n        answers: answerArr,\n        category: q.category,\n        difficulty: q.difficulty,\n        scoreValue: scoreValue(),\n        id: {\n          nanoid\n        }\n      };\n    }));\n  }\n\n  function beginGame() {\n    setStartGame(true);\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex;\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  function checkAnswers() {\n    setAnswerCheck(true);\n  }\n\n  function getScore() {\n    let totalPossibleScore = 0;\n    let playerScore = 0;\n\n    for (let q of questions) {\n      totalPossibleScore += q.scoreValue;\n\n      for (let a of q.answers) {\n        if (a.isSelected && a.isCorrect) {\n          playerScore += q.scoreValue;\n        }\n      }\n    }\n\n    return `Score: ${playerScore} / ${totalPossibleScore}`;\n  }\n\n  function setGame() {\n    setResetGame(!resetGame);\n    setStartGame(false);\n    setAnswerCheck(false);\n  }\n\n  const displayTrivia = questions.map(q => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: q.question,\n        category: q.category,\n        difficulty: q.difficulty\n      }, q.question, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-button-container\",\n        children: q.answers.map(a => {\n          return /*#__PURE__*/_jsxDEV(Answers, {\n            answer: a.answer,\n            aid: a.id,\n            qid: q.id,\n            selected: a.isSelected,\n            selectAnswer: answerSelected,\n            answerCheck: answerCheck,\n            isCorrect: a.isCorrect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: StartGame ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayTrivia, answerCheck && /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"score\",\n        children: getScore()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"check-answers-button\",\n        onClick: answerCheck ? setGame : checkAnswers,\n        children: answerCheck ? \"New Game\" : \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroPage, {\n      startGame: beginGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iOrdjOgQM61vsiSekjTI1hbuXHU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/steph/OneDrive/Desktop/Dev Prog/React Quiz/my-app/src/App.js"],"names":["React","useState","useEffect","IntroPage","Question","Answers","nanoid","App","StartGame","setStartGame","questions","setQuestions","answerCheck","setAnswerCheck","resetGame","setResetGame","fetch","then","res","json","data","results","map","answers","incorrect_answers","concat","correct_answer","scoreValue","difficulty","answersArr","a","answer","isSelected","isCorrect","id","question","shuffle","category","answerSelected","aid","qid","oldQuestions","q","answerArr","beginGame","array","currentIndex","length","randomIndex","Math","floor","random","checkAnswers","getScore","totalPossibleScore","playerScore","setGame","displayTrivia"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport IntroPage from \"./intropage.js\"\nimport Question from \"./questions.js\"\nimport Answers from \"./answers.js\"\nimport { nanoid } from \"nanoid\"\n\nfunction App() {\n\n  const [StartGame, setStartGame] = useState(false)\n\n  const [questions, setQuestions] = useState([])\n\n  const [answerCheck, setAnswerCheck] = useState(false)\n\n  const [resetGame, setResetGame] = useState(true)\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n      .then(res => res.json())\n      .then(data => {\n        const questions = data.results.map(res => {\n\n          const answers = res.incorrect_answers.concat(res.correct_answer)\n\n          function scoreValue() {\n            if (res.difficulty === \"easy\") {\n              return 1\n            } else if (res.difficulty === \"medium\") {\n              return 2\n            } else if (res.difficulty === \"hard\") {\n              return 3\n            }\n          }\n\n          const answersArr = answers.map(a => {\n            return ({\n              answer: a,\n              isSelected: false,\n              isCorrect: a === res.correct_answer ? true : false,\n              id: { nanoid }\n            })\n          })\n\n          return ({\n            question: res.question,\n            answers: shuffle(answersArr),\n            category: res.category,\n            difficulty: res.difficulty,\n            scoreValue: scoreValue(),\n            id: { nanoid }\n          })\n        })\n        setQuestions(questions)\n      })\n\n  }, [resetGame])\n\n  function answerSelected(aid, qid) {\n\n    setQuestions(oldQuestions => oldQuestions.map(q => {\n\n      if(q.id === qid){\n        const answerArr = q.answers.map(a => {\n\n        /*if(a.id === aid && q.id === qid){\n          return { ...a, isSelected: !a.isSelected }\n        }else if(q.id !== qid){\n          return a\n        }*/\n\n        return a.id === aid ?\n          {...a, isSelected: !a.isSelected} :\n          a\n\n      })\n      }\n\n      \n\n      function scoreValue() {\n        if (q.difficulty === \"easy\") {\n          return 1\n        } else if (q.difficulty === \"medium\") {\n          return 2\n        } else if (q.difficulty === \"hard\") {\n          return 3\n        }\n      }\n\n      return ({\n        question: q.question,\n        answers: answerArr,\n        category: q.category,\n        difficulty: q.difficulty,\n        scoreValue: scoreValue(),\n        id: { nanoid }\n      })\n\n    }))\n  }\n\n  function beginGame() {\n    setStartGame(true)\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex--\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]\n    }\n    return array\n  }\n\n  function checkAnswers() {\n    setAnswerCheck(true)\n  }\n\n  function getScore() {\n\n    let totalPossibleScore = 0\n    let playerScore = 0\n\n    for (let q of questions) {\n\n      totalPossibleScore += q.scoreValue\n\n      for (let a of q.answers) {\n\n        if (a.isSelected && a.isCorrect) {\n\n          playerScore += q.scoreValue\n\n        }\n      }\n    }\n    \n    return `Score: ${playerScore} / ${totalPossibleScore}`\n  }\n\n  function setGame() {\n    setResetGame(!resetGame)\n    setStartGame(false)\n    setAnswerCheck(false)\n  }\n\n  const displayTrivia = questions.map(q => {\n\n    return (\n\n      <>\n        <Question\n          key={q.question}\n          question={q.question}\n          category={q.category}\n          difficulty={q.difficulty}\n        />\n\n        <div className=\"answer-button-container\">\n          {q.answers.map(a => {\n            return (\n              <Answers\n                answer={a.answer}\n                aid={a.id}\n                qid={q.id}\n                selected={a.isSelected}\n                selectAnswer={answerSelected}\n                answerCheck={answerCheck}\n                isCorrect={a.isCorrect}\n              />\n            )\n          })}\n        </div>\n\n\n\n        <hr className=\"divider\" />\n\n      </>\n\n    )\n\n  })\n\n\n  return (\n\n\n    <div className=\"container\">\n      {\n        StartGame\n\n          ?\n          <>\n\n            {displayTrivia}\n\n            {answerCheck && <h2 className=\"score\" >{getScore()}</h2>}\n\n            <button className=\"check-answers-button\" onClick={answerCheck ? setGame : checkAnswers}>{answerCheck ? \"New Game\" : \"Check Answers\"}</button>\n          </>\n\n          :\n\n          <IntroPage\n            startGame={beginGame}\n\n          />\n      }\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}
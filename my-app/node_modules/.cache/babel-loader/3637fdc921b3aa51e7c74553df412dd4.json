{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\OneDrive\\\\Desktop\\\\Dev Prog\\\\React Quiz\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport IntroPage from \"./intropage.js\";\nimport Question from \"./questions.js\";\nimport Answers from \"./answers.js\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [StartGame, setStartGame] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answerCheck, setAnswerCheck] = useState(false);\n  const [resetGame, setResetGame] = useState(true);\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => {\n      const questions = data.results.map(res => {\n        const answers = res.incorrect_answers.concat(res.correct_answer);\n\n        function scoreValue() {\n          if (res.difficulty === \"easy\") {\n            return 1;\n          } else if (res.difficulty === \"medium\") {\n            return 2;\n          } else if (res.difficulty === \"hard\") {\n            return 3;\n          }\n        }\n\n        const answersArr = answers.map(a => {\n          return {\n            answer: a,\n            isSelected: false,\n            isCorrect: a === res.correct_answer ? true : false,\n            id: {\n              nanoid\n            }\n          };\n        });\n        return {\n          question: res.question,\n          answers: shuffle(answersArr),\n          category: res.category,\n          difficulty: res.difficulty,\n          scoreValue: scoreValue(),\n          id: {\n            nanoid\n          }\n        };\n      });\n      setQuestions(questions);\n    });\n  }, [resetGame]);\n\n  function answerSelected(id) {\n    setQuestions(oldQuestions => oldQuestions.map(q => {\n      const answerArr = q.answers.map(a => {\n        return a.id === id ? { ...a,\n          isSelected: !a.isSelected\n        } : a;\n      });\n      return {\n        question: q.question,\n        answers: answerArr,\n        category: q.category,\n        difficulty: q.difficulty,\n        id: {\n          nanoid\n        }\n      };\n    }));\n  }\n\n  function beginGame() {\n    setStartGame(true);\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex;\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  function checkAnswers() {\n    setAnswerCheck(true);\n  }\n\n  function getScore() {\n    let totalPossibleScore = 0;\n    let playerScore = 0;\n\n    for (let q of questions) {\n      totalPossibleScore += q.scoreValue;\n\n      for (let a of q.answers) {\n        if (a.selected && a.isCorrect) {\n          playerScore += q.scoreValue;\n        }\n      }\n    }\n\n    return `${playerScore} / ${totalPossibleScore}`;\n  }\n\n  function setGame() {\n    setResetGame(!resetGame);\n    setStartGame(false);\n    setAnswerCheck(false);\n  }\n\n  const displayTrivia = questions.map(q => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: q.question,\n        category: q.category,\n        difficulty: q.difficulty\n      }, q.question, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-button-container\",\n        children: q.answers.map(a => {\n          return /*#__PURE__*/_jsxDEV(Answers, {\n            answer: a.answer,\n            id: a.id,\n            selected: a.isSelected,\n            selectAnswer: answerSelected,\n            answerCheck: answerCheck,\n            isCorrect: a.isCorrect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: StartGame ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayTrivia, answerCheck && /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: getScore()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"check-answers-button\",\n        onClick: answerCheck ? setGame : checkAnswers,\n        children: answerCheck ? \"New Game\" : \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroPage, {\n      startGame: beginGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iOrdjOgQM61vsiSekjTI1hbuXHU=\");\n\n_c = App;\nexport default App;\n/*\n0:\nanswers: Array(4)\n0: {answer: 'Ringo Starr', id: {…}}\n1: {answer: 'Stuart Sutcliffe', id: {…}}\n2: {answer: 'Pete Best', id: {…}}\n3: {answer: 'Tommy Moore', id: {…}}\nlength: 4\n[[Prototype]]: Array(0)\ncategory: \"Entertainment: Music\"\ndifficulty: \"hard\"\nid: {nanoid: ƒ}\nquestion: \"Who was the original drummer for The Beatles?\"\n[[Prototype]]: Object\n1: {question: 'Who created the Cartoon Network series &quot;Adventure Time&quot;?', answers: Array(4), category: 'Entertainment: Cartoon & Animations', difficulty: 'easy', id: {…}}\n2: {question: 'On a standard Monopoly board, how much do you have to pay for Tennessee Ave?', answers: Array(4), category: 'Entertainment: Board Games', difficulty: 'hard', id: {…}}\n3: {question: 'The book &quot;The Little Prince&quot; was written by...', answers: Array(4), category: 'Entertainment: Books', difficulty: 'medium', id: {…}}\n4: {question: 'Which RAID array type is associated with data mirroring?', answers: Array(4), category: 'Science: Computers', difficulty: 'hard', id: {…}}\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/steph/OneDrive/Desktop/Dev Prog/React Quiz/my-app/src/App.js"],"names":["React","useState","useEffect","IntroPage","Question","Answers","nanoid","App","StartGame","setStartGame","questions","setQuestions","answerCheck","setAnswerCheck","resetGame","setResetGame","fetch","then","res","json","data","results","map","answers","incorrect_answers","concat","correct_answer","scoreValue","difficulty","answersArr","a","answer","isSelected","isCorrect","id","question","shuffle","category","answerSelected","oldQuestions","q","answerArr","beginGame","array","currentIndex","length","randomIndex","Math","floor","random","checkAnswers","getScore","totalPossibleScore","playerScore","selected","setGame","displayTrivia"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport IntroPage from \"./intropage.js\"\nimport Question from \"./questions.js\"\nimport Answers from \"./answers.js\"\nimport { nanoid } from \"nanoid\"\n\nfunction App() {\n\n  const [StartGame, setStartGame] = useState(false)\n\n  const [questions, setQuestions] = useState([])\n\n  const [answerCheck, setAnswerCheck] = useState(false)\n\n  const [resetGame, setResetGame] = useState(true)\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n      .then(res => res.json())\n      .then(data => {\n        const questions = data.results.map(res => {\n\n          const answers = res.incorrect_answers.concat(res.correct_answer)\n\n          function scoreValue() {\n            if (res.difficulty === \"easy\") {\n              return 1\n            } else if (res.difficulty === \"medium\") {\n              return 2\n            } else if (res.difficulty === \"hard\") {\n              return 3\n            }\n          }\n\n          const answersArr = answers.map(a => {\n            return ({\n              answer: a,\n              isSelected: false,\n              isCorrect: a === res.correct_answer ? true : false,\n              id: { nanoid }\n            })\n          })\n\n          return ({\n            question: res.question,\n            answers: shuffle(answersArr),\n            category: res.category,\n            difficulty: res.difficulty,\n            scoreValue: scoreValue(),\n            id: { nanoid }\n          })\n        })\n        setQuestions(questions)\n      })\n\n  }, [resetGame])\n\n  function answerSelected(id) {\n\n    setQuestions(oldQuestions => oldQuestions.map(q => {\n\n      const answerArr = q.answers.map(a => {\n        return (\n          a.id === id ?\n            { ...a, isSelected: !a.isSelected } :\n            a\n        )\n\n      })\n\n      return ({\n        question: q.question,\n        answers: answerArr,\n        category: q.category,\n        difficulty: q.difficulty,\n        id: { nanoid }\n      })\n\n    }))\n  }\n\n  function beginGame() {\n    setStartGame(true)\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex--\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]\n    }\n    return array\n  }\n\n  function checkAnswers() {\n    setAnswerCheck(true)\n  }\n\n  function getScore() {\n    let totalPossibleScore = 0\n    let playerScore = 0\n    for (let q of questions) {\n      totalPossibleScore += q.scoreValue\n      for (let a of q.answers) {\n        if (a.selected && a.isCorrect) {\n          playerScore += q.scoreValue\n        }\n      }\n    }\n    return `${playerScore} / ${totalPossibleScore}`\n  }\n\n  function setGame() {\n    setResetGame(!resetGame)\n    setStartGame(false)\n    setAnswerCheck(false)\n  }\n\n  const displayTrivia = questions.map(q => {\n\n    return (\n\n      <>\n        <Question\n          key={q.question}\n          question={q.question}\n          category={q.category}\n          difficulty={q.difficulty}\n        />\n\n        <div className=\"answer-button-container\">\n          {q.answers.map(a => {\n            return (\n              <Answers\n                answer={a.answer}\n                id={a.id}\n                selected={a.isSelected}\n                selectAnswer={answerSelected}\n                answerCheck={answerCheck}\n                isCorrect={a.isCorrect}\n              />\n            )\n          })}\n        </div>\n\n\n\n        <hr className=\"divider\" />\n\n      </>\n\n    )\n\n  })\n\n\n  return (\n\n\n    <div className=\"container\">\n      {\n        StartGame\n\n          ?\n          <>\n\n            {displayTrivia}\n\n            {answerCheck && <h2>{getScore()}</h2>}\n\n            <button className=\"check-answers-button\" onClick={answerCheck ? setGame : checkAnswers}>{answerCheck ? \"New Game\" : \"Check Answers\"}</button>\n          </>\n\n          :\n\n          <IntroPage\n            startGame={beginGame}\n\n          />\n      }\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n/*\n0:\nanswers: Array(4)\n0: {answer: 'Ringo Starr', id: {…}}\n1: {answer: 'Stuart Sutcliffe', id: {…}}\n2: {answer: 'Pete Best', id: {…}}\n3: {answer: 'Tommy Moore', id: {…}}\nlength: 4\n[[Prototype]]: Array(0)\ncategory: \"Entertainment: Music\"\ndifficulty: \"hard\"\nid: {nanoid: ƒ}\nquestion: \"Who was the original drummer for The Beatles?\"\n[[Prototype]]: Object\n1: {question: 'Who created the Cartoon Network series &quot;Adventure Time&quot;?', answers: Array(4), category: 'Entertainment: Cartoon & Animations', difficulty: 'easy', id: {…}}\n2: {question: 'On a standard Monopoly board, how much do you have to pay for Tennessee Ave?', answers: Array(4), category: 'Entertainment: Board Games', difficulty: 'hard', id: {…}}\n3: {question: 'The book &quot;The Little Prince&quot; was written by...', answers: Array(4), category: 'Entertainment: Books', difficulty: 'medium', id: {…}}\n4: {question: 'Which RAID array type is associated with data mirroring?', answers: Array(4), category: 'Science: Computers', difficulty: 'hard', id: {…}}\n */"]},"metadata":{},"sourceType":"module"}
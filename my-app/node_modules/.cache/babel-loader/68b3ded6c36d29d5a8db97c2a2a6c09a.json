{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\OneDrive\\\\Desktop\\\\Dev Prog\\\\React Quiz\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport IntroPage from \"./intropage.js\";\nimport Question from \"./questions.js\";\nimport Answers from \"./answers.js\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [StartGame, setStartGame] = useState(false);\n  const [selected, setSelected] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answerArr, setAnswerArr] = useState([]);\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => {\n      const questions = data.results.map(res => {\n        let answers = res.incorrect_answers.concat(res.correct_answer);\n        return {\n          question: res.question,\n          answers: answers,\n          category: res.category,\n          difficulty: res.difficulty,\n          id: {\n            nanoid\n          }\n        };\n      });\n      setQuestions(questions);\n    });\n  }, []);\n  console.log(questions);\n  useEffect(() => {\n    let answerArr = [];\n    questions.map(q => {\n      let answers = q.incorrect_answers.concat(q.correct_answer);\n      answers.map(a => {\n        answerArr.push({\n          answer: a,\n          isSelected: false,\n          id: {\n            nanoid\n          }\n        });\n      });\n    });\n    setAnswerArr(answerArr);\n  }, []);\n\n  function answerSelected() {\n    setSelected(!selected);\n  }\n\n  function beginGame() {\n    setStartGame(true);\n  }\n\n  const displayTrivia = questions.map(q => {\n    let answers = q.incorrect_answers.concat(q.correct_answer);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: q.question,\n        category: q.category,\n        difficulty: q.difficulty\n      }, q.question, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-button-container\",\n        children: answers.map(a => {\n          return /*#__PURE__*/_jsxDEV(Answers, {\n            answer: a,\n            selectAnswer: answerSelected,\n            selected: selected,\n            id: nanoid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: StartGame ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayTrivia, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"check-answers-button\",\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroPage, {\n      startGame: beginGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kKCJy8+XDvbfbecoPVjrma+LDUQ=\");\n\n_c = App;\nexport default App;\n/*\n0:\ncategory: \"Science & Nature\"\ncorrect_answer: \"Talc\"\ndifficulty: \"medium\"\nincorrect_answers: (3) ['Quartz', 'Diamond', 'Gypsum']\nquestion: \"What mineral has the lowest number on the Mohs scale?\"\ntype: \"multiple\"\n\n  const [triviaInfo, setTriviaInfo] = useState([])\n\n  const [answerArr, setAnswerArr] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n      .then(res => res.json())\n      .then(data => {\n        const triviaInfo = data.results.map(res => {\n\n          let answers = res.incorrect_answers.concat(res.correct_answer)\n\n          let answersArr = answers.map(a => {\n            return({\n              answer: a,\n              id: {nanoid}\n            })\n          })\n\n          return({\n            question: res.question,\n            answers: answersArr,\n            category: res.category,\n            difficulty: res.difficulty,\n          })\n        })\n        setTriviaInfo(triviaInfo)\n      })\n      \n  }, [])\n\n  console.log(triviaInfo)\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/steph/OneDrive/Desktop/Dev Prog/React Quiz/my-app/src/App.js"],"names":["React","useState","useEffect","IntroPage","Question","Answers","nanoid","App","StartGame","setStartGame","selected","setSelected","questions","setQuestions","answerArr","setAnswerArr","fetch","then","res","json","data","results","map","answers","incorrect_answers","concat","correct_answer","question","category","difficulty","id","console","log","q","a","push","answer","isSelected","answerSelected","beginGame","displayTrivia"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport IntroPage from \"./intropage.js\"\nimport Question from \"./questions.js\"\nimport Answers from \"./answers.js\"\nimport { nanoid } from \"nanoid\"\n\nfunction App() {\n\n  const [StartGame, setStartGame] = useState(false)\n\n  const [selected, setSelected] = useState(false)\n\n  const [questions, setQuestions] = useState([])\n\n  const [answerArr, setAnswerArr] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n      .then(res => res.json())\n      .then(data => {\n        const questions = data.results.map(res => {\n\n          let answers = res.incorrect_answers.concat(res.correct_answer)\n\n          return({\n            question: res.question,\n            answers: answers,\n            category: res.category,\n            difficulty: res.difficulty,\n            id: {nanoid}\n          })\n        })\n        setQuestions(questions)\n      })\n      \n  }, [])\n\n  console.log(questions)\n\n\n  useEffect(() => {\n\n    let answerArr = []\n\n    questions.map(q => {\n\n      let answers = q.incorrect_answers.concat(q.correct_answer)\n\n      answers.map(a => {\n        answerArr.push({\n          answer: a,\n          isSelected: false,\n          id: {nanoid}\n        })\n      })\n    })\n    setAnswerArr(answerArr)\n\n  }, [])\n\n  function answerSelected() {\n    setSelected(!selected)\n  }\n\n  function beginGame() {\n    setStartGame(true)\n  }\n\n  const displayTrivia = questions.map(q => {\n\n    let answers = q.incorrect_answers.concat(q.correct_answer)\n\n    return (\n\n      <>\n        <Question\n          key={q.question}\n          question={q.question}\n          category={q.category}\n          difficulty={q.difficulty}\n        />\n\n        <div className=\"answer-button-container\">\n          {answers.map(a => {\n            return (\n              <Answers\n                answer={a}\n                selectAnswer={answerSelected}\n                selected={selected}\n                id={nanoid}\n              />\n            )\n          })}\n        </div>\n\n\n\n        <hr className=\"divider\" />\n\n      </>\n\n    )\n\n  })\n\n  return (\n\n    <div className=\"container\">\n\n      {\n        StartGame\n\n          ?\n          <>\n            {displayTrivia}\n            <button className=\"check-answers-button\">Check Answers</button>\n          </>\n\n          :\n\n          <IntroPage\n            startGame={beginGame}\n\n          />\n      }\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n/*\n0:\ncategory: \"Science & Nature\"\ncorrect_answer: \"Talc\"\ndifficulty: \"medium\"\nincorrect_answers: (3) ['Quartz', 'Diamond', 'Gypsum']\nquestion: \"What mineral has the lowest number on the Mohs scale?\"\ntype: \"multiple\"\n\n  const [triviaInfo, setTriviaInfo] = useState([])\n\n  const [answerArr, setAnswerArr] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n      .then(res => res.json())\n      .then(data => {\n        const triviaInfo = data.results.map(res => {\n\n          let answers = res.incorrect_answers.concat(res.correct_answer)\n\n          let answersArr = answers.map(a => {\n            return({\n              answer: a,\n              id: {nanoid}\n            })\n          })\n\n          return({\n            question: res.question,\n            answers: answersArr,\n            category: res.category,\n            difficulty: res.difficulty,\n          })\n        })\n        setTriviaInfo(triviaInfo)\n      })\n      \n  }, [])\n\n  console.log(triviaInfo)\n */"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\OneDrive\\\\Desktop\\\\Dev Prog\\\\React Quiz\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport IntroPage from \"./intropage.js\";\nimport Question from \"./questions.js\";\nimport Answers from \"./answers.js\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [StartGame, setStartGame] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => {\n      const questions = data.results.map(res => {\n        let answers = res.incorrect_answers.concat(res.correct_answer);\n        const answersArr = answers.map(a => {\n          return {\n            answer: a,\n            isSelected: false,\n            isCorrect: a === res.correct_answer ? true : false,\n            id: {\n              nanoid\n            }\n          };\n        });\n        return {\n          question: res.question,\n          answers: shuffle(answersArr),\n          category: res.category,\n          difficulty: res.difficulty,\n          id: {\n            nanoid\n          }\n        };\n      });\n      setQuestions(questions);\n    });\n  }, []);\n\n  function answerSelected(id) {\n    setQuestions(oldQuestions => oldQuestions.map(q => {\n      const answerArr = q.answers.map(a => {\n        return a.id === id ? { ...a,\n          isSelected: !a.isSelected\n        } : a;\n      });\n      return {\n        question: q.question,\n        answers: answerArr,\n        category: q.category,\n        difficulty: q.difficulty,\n        id: {\n          nanoid\n        }\n      };\n    }));\n  }\n\n  function beginGame() {\n    setStartGame(true);\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex;\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  function checkAnswers() {\n    for (let q of questions) {\n      for (let a of q.answers) {\n        if (a.isCorrect && a.isSelected) {\n          console.log(\"correct\");\n        }\n      }\n    }\n  }\n\n  const displayTrivia = questions.map(q => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: q.question,\n        category: q.category,\n        difficulty: q.difficulty\n      }, q.question, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-button-container\",\n        children: q.answers.map(a => {\n          return /*#__PURE__*/_jsxDEV(Answers, {\n            answer: a.answer,\n            id: a.id,\n            selected: a.isSelected,\n            selectAnswer: answerSelected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: StartGame ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayTrivia, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"check-answers-button\",\n        onClick: checkAnswers,\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(IntroPage, {\n      startGame: beginGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"i8k8FFGPBLelfZ5dBEJTcWPs2KA=\");\n\n_c = App;\nexport default App;\n/*\n0:\nanswers: Array(4)\n0: {answer: 'Ringo Starr', id: {…}}\n1: {answer: 'Stuart Sutcliffe', id: {…}}\n2: {answer: 'Pete Best', id: {…}}\n3: {answer: 'Tommy Moore', id: {…}}\nlength: 4\n[[Prototype]]: Array(0)\ncategory: \"Entertainment: Music\"\ndifficulty: \"hard\"\nid: {nanoid: ƒ}\nquestion: \"Who was the original drummer for The Beatles?\"\n[[Prototype]]: Object\n1: {question: 'Who created the Cartoon Network series &quot;Adventure Time&quot;?', answers: Array(4), category: 'Entertainment: Cartoon & Animations', difficulty: 'easy', id: {…}}\n2: {question: 'On a standard Monopoly board, how much do you have to pay for Tennessee Ave?', answers: Array(4), category: 'Entertainment: Board Games', difficulty: 'hard', id: {…}}\n3: {question: 'The book &quot;The Little Prince&quot; was written by...', answers: Array(4), category: 'Entertainment: Books', difficulty: 'medium', id: {…}}\n4: {question: 'Which RAID array type is associated with data mirroring?', answers: Array(4), category: 'Science: Computers', difficulty: 'hard', id: {…}}\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/steph/OneDrive/Desktop/Dev Prog/React Quiz/my-app/src/App.js"],"names":["React","useState","useEffect","IntroPage","Question","Answers","nanoid","App","StartGame","setStartGame","questions","setQuestions","fetch","then","res","json","data","results","map","answers","incorrect_answers","concat","correct_answer","answersArr","a","answer","isSelected","isCorrect","id","question","shuffle","category","difficulty","answerSelected","oldQuestions","q","answerArr","beginGame","array","currentIndex","length","randomIndex","Math","floor","random","checkAnswers","console","log","displayTrivia"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport IntroPage from \"./intropage.js\"\nimport Question from \"./questions.js\"\nimport Answers from \"./answers.js\"\nimport { nanoid } from \"nanoid\"\n\nfunction App() {\n\n  const [StartGame, setStartGame] = useState(false)\n\n  const [questions, setQuestions] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n      .then(res => res.json())\n      .then(data => {\n        const questions = data.results.map(res => {\n\n          let answers = res.incorrect_answers.concat(res.correct_answer)\n\n          const answersArr = answers.map(a =>{\n            return({\n              answer: a,\n              isSelected: false,\n              isCorrect: a === res.correct_answer ? true : false,\n              id: {nanoid}\n            })\n          })\n\n          return({\n            question: res.question,\n            answers: shuffle(answersArr),\n            category: res.category,\n            difficulty: res.difficulty,\n            id: {nanoid}\n          })\n        })\n        setQuestions(questions)\n      })\n      \n  }, [])\n\n  function answerSelected(id) {\n\n    setQuestions(oldQuestions => oldQuestions.map(q => {\n\n      const answerArr = q.answers.map(a => {\n        return(\n          a.id === id ? \n          {...a, isSelected: !a.isSelected} :\n          a\n        )\n\n      })\n\n      return({\n        question: q.question,\n        answers: answerArr,\n        category: q.category,\n        difficulty: q.difficulty,\n        id: {nanoid}\n      })\n\n    }))\n  }\n\n  function beginGame() {\n    setStartGame(true)\n  }\n\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while(currentIndex !=0){\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex--\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]\n    }\n    return array\n  }\n\n  function checkAnswers(){\n    for(let q of questions){\n      for(let a of q.answers){\n        if(a.isCorrect && a.isSelected){\n          console.log(\"correct\")\n        }\n      }\n    }\n  }\n\n  const displayTrivia = questions.map(q => {\n\n    return (\n\n      <>\n        <Question\n          key={q.question}\n          question={q.question}\n          category={q.category}\n          difficulty={q.difficulty}\n        />\n\n        <div className=\"answer-button-container\">\n          {q.answers.map(a => {\n            return (\n              <Answers\n                answer={a.answer}\n                id={a.id}\n                selected={a.isSelected}\n                selectAnswer={answerSelected}\n              />\n            )\n          })}\n        </div>\n\n\n\n        <hr className=\"divider\" />\n\n      </>\n\n    )\n\n  })\n\n  return (\n\n    <div className=\"container\">\n\n      {\n        StartGame\n\n          ?\n          <>\n            {displayTrivia}\n            <button className=\"check-answers-button\" onClick={checkAnswers}>Check Answers</button>\n          </>\n\n          :\n\n          <IntroPage\n            startGame={beginGame}\n\n          />\n      }\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n/*\n0:\nanswers: Array(4)\n0: {answer: 'Ringo Starr', id: {…}}\n1: {answer: 'Stuart Sutcliffe', id: {…}}\n2: {answer: 'Pete Best', id: {…}}\n3: {answer: 'Tommy Moore', id: {…}}\nlength: 4\n[[Prototype]]: Array(0)\ncategory: \"Entertainment: Music\"\ndifficulty: \"hard\"\nid: {nanoid: ƒ}\nquestion: \"Who was the original drummer for The Beatles?\"\n[[Prototype]]: Object\n1: {question: 'Who created the Cartoon Network series &quot;Adventure Time&quot;?', answers: Array(4), category: 'Entertainment: Cartoon & Animations', difficulty: 'easy', id: {…}}\n2: {question: 'On a standard Monopoly board, how much do you have to pay for Tennessee Ave?', answers: Array(4), category: 'Entertainment: Board Games', difficulty: 'hard', id: {…}}\n3: {question: 'The book &quot;The Little Prince&quot; was written by...', answers: Array(4), category: 'Entertainment: Books', difficulty: 'medium', id: {…}}\n4: {question: 'Which RAID array type is associated with data mirroring?', answers: Array(4), category: 'Science: Computers', difficulty: 'hard', id: {…}}\n */"]},"metadata":{},"sourceType":"module"}